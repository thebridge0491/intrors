# Targets Makefile script.
#----------------------------------------
# Common automatic variables legend (GNU make: make (Linux) gmake (FreeBSD)):
# $* - basename (cur target)  $^ - name(s) (all depns)  $< - name (1st depn)
# $@ - name (cur target)      $% - archive member name  $? - changed depns

FMTS ?= tar.gz
distdir = $(proj)-$(version)

.PHONY: help clean test dist doc report{{#executable}} uninstall install{{/executable}}
help: ## help
	@echo "##### subproject: $(proj) #####"
	@echo "Usage: $(MAKE) [target] -- some valid targets:"
#	-@for fileX in $(MAKEFILE_LIST) `if [ -z "$(MAKEFILE_LIST)" ] ; then echo Makefile ./Makefile-targets.mk ; fi` ; do \
#		grep -ve '^[A-Z]' $$fileX | awk '/^[^.%][-A-Za-z0-9_]+[ ]*:.*$$/ { print "...", substr($$1, 1, length($$1)) }' | sort ; \
#	done
	-@for fileX in $(MAKEFILE_LIST) `if [ -z "$(MAKEFILE_LIST)" ] ; then echo Makefile ./Makefile-targets.mk ; fi` ; do \
		grep -E '^[ a-zA-Z_-]+:.*?## .*$$' $$fileX | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "%-25s%s\n", $$1, $$2}' ; \
	done
clean: ## clean build artifacts
	-rm -fr ./build/* ./build/.??* core* *.profraw .coverage *.gcda *.gcno \
		*.log $(par_dir)/target/$(CONFIG)/*$(outbase)* \
		$(par_dir)/target/$(CONFIG)/ts_main_$(pkg)
{{#executable}}
	-rm -fr $(par_dir)/target/$(CONFIG)/$(parent)_main
{{/executable}}
test: $(par_dir)/target/$(CONFIG)/ts_main_$(pkg) ## run test [TOPTS=""]
#	export [DY]LD_LIBRARY_PATH=. # ([da|ba|z]sh Linux)
#	setenv [DY]LD_LIBRARY_PATH . # (tcsh FreeBSD)
	-RUST_LOG=quickcheck LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):lib $< $(TOPTS)
{{#executable}}
uninstall install: ## [un]install executable(s)
	-mkdir -p $(HOME)/.cargo/bin
	-@if [ "uninstall" = "$@" ] ; then \
		rm -ir $(HOME)/.cargo/bin/$(parent)_main ; \
	else \
		cp -f $(par_dir)/target/$(CONFIG)/$(parent)_main $(HOME)/.cargo/bin/ ; \
	fi
{{/executable}}
dist: ## [FMTS="tar.gz"] archive source code
	-@mkdir -p build/$(distdir) ; cp -f exclude.lst build/
#	#-zip -9 -q --exclude @exclude.lst -r - . | unzip -od build/$(distdir) -
	-tar --format=posix --dereference --exclude-from=exclude.lst -cf - . | tar -xpf - -C build/$(distdir)
	
	-@for fmt in `echo $(FMTS) | tr ',' ' '` ; do \
		case $$fmt in \
			zip) echo "### build/$(distdir).zip ###" ; \
				rm -f build/$(distdir).zip ; \
				(cd build ; zip -9 -q -r $(distdir).zip $(distdir)) ;; \
			*) tarext=`echo $$fmt | grep -e '^tar$$' -e '^tar.xz$$' -e '^tar.bz2$$' || echo tar.gz` ; \
				echo "### build/$(distdir).$$tarext ###" ; \
				rm -f build/$(distdir).$$tarext ; \
				(cd build ; tar --posix -L -caf $(distdir).$$tarext $(distdir)) ;; \
		esac \
	done
	-@rm -r build/$(distdir)
doc: ## generate documentation [OPTS="??"]
	-rm -fr $(par_dir)/target/doc/*$(outbase)*
	-rustdoc --crate-name $(outbase) --crate-type lib --no-deps $(RUSTLDFLAGS) \
		-o $(par_dir)/target/doc `cat build/depns_src.txt` $(OPTS) src/lib.rs
#lint: ## lint check [OPTS="??"]
#	-rustfmt --check $(OPTS) src/lib.rs
report: ## report code coverage
#	# read coverage data w/ [llvm-cov] gcov -f -b -n *.gcda
#	find . -type f -name '*.gcda' -exec llvm-cov gcov -f -b --no-output {} \;
#	# read coverage data w/ lcov -c -d . -o .coverage ... *.gcda
	-mkdir -p build/cov
	-lcov --capture -d . -o build/.coverage --gcov-tool ./llvm-gcov.sh
	-genhtml -o build/cov build/.coverage
